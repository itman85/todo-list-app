package com.picoder.sample.todolist.fragment.list.adapter

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.navigation.findNavController
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.RecyclerView
import com.picoder.sample.todolist.R
import com.picoder.sample.todolist.data.model.Priority
import com.picoder.sample.todolist.data.model.ToDoData
import com.picoder.sample.todolist.fragment.list.ListFragmentDirections
import kotlinx.android.synthetic.main.todo_item_layout.view.*

class ListAdapter : RecyclerView.Adapter<ListAdapter.ToDoViewHolder>() {

    // 1. create item layout
    // 2. create view holder
    // 3. create adapter

    var dataList = emptyList<ToDoData>()

    class ToDoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {

    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ToDoViewHolder {
        return ToDoViewHolder(
            LayoutInflater.from(parent.context).inflate(R.layout.todo_item_layout, parent, false)
        )
    }

    override fun onBindViewHolder(holder: ToDoViewHolder, position: Int) {
        holder.itemView.tvTitle.text = dataList[position].title
        holder.itemView.tvDescription.text = dataList[position].description
        holder.itemView.item_bg.setOnClickListener {
            // ListFragmentDirections will generated by navigation safeargs android plugin
            // currentItem is arguments of UpdateFragment define in app_navigation.xml
            val actionDirection =
                ListFragmentDirections.actionListFragmentToUpdateFragment(currentItem = dataList[position])
            holder.itemView.findNavController().navigate(actionDirection)
        }
        when (dataList[position].priority) {
            Priority.HIGH -> holder.itemView.priorityIndicator.setCardBackgroundColor(
                ContextCompat.getColor(
                    holder.itemView.context,
                    R.color.red
                )
            )
            Priority.MEDIUM -> holder.itemView.priorityIndicator.setCardBackgroundColor(
                ContextCompat.getColor(
                    holder.itemView.context,
                    R.color.yellow
                )
            )
            Priority.LOW -> holder.itemView.priorityIndicator.setCardBackgroundColor(
                ContextCompat.getColor(
                    holder.itemView.context,
                    R.color.green
                )
            )
        }
    }

    override fun getItemCount(): Int {
        return dataList.size
    }

    fun setData(toDoData: List<ToDoData>) {
        val toDoDiffUtil = ToDoDiffUtil(dataList, toDoData)
        val diffResult = DiffUtil.calculateDiff(toDoDiffUtil)
        this.dataList = toDoData
        diffResult.dispatchUpdatesTo(this)
    }
}